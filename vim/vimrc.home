autocmd!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VUNDLE START
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-scripts/taglist.vim'
Plugin 'majutsushi/tagbar'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-unimpaired'
Plugin 'OrangeT/vim-csharp'
Plugin 'OmniSharp/omnisharp-vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-scripts/BufOnly.vim'
Plugin 'rizzatti/dash.vim'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'airblade/vim-gitgutter'
Plugin 'airblade/vim-rooter'
Plugin 'tpope/vim-repeat'
Plugin 'metakirby5/codi.vim'
Plugin 'JamshedVesuna/vim-markdown-preview'
"Plugin 'tsaleh/vim-supertab'
"Plugin 'ervandew/supertab'
Plugin 'rust-lang/rust.vim'
Plugin 'junegunn/goyo.vim'
Plugin 'vimwiki/vimwiki'
Plugin 'vim-scripts/ShaderHighLight'
"Plugin 'itchyny/vim-cursorword'
Plugin 'rdnetto/YCM-Generator'
Plugin 'Shougo/echodoc.vim'
Plugin 'tommcdo/vim-lion'

" Colorschemes
Plugin 'vim-scripts/obsidian2.vim'
Plugin 'trevorrjohn/vim-obsidian'
Plugin 'tomasr/molokai'
Plugin 'fcevado/molokai_dark'
Plugin 'altercation/vim-colors-solarized'
Plugin 'whatyouhide/vim-gotham'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'chriskempson/base16-vim'
Plugin 'jacoborus/tender'
Plugin 'qualiabyte/vim-colorstepper'
Plugin 'morhetz/gruvbox'

Plugin 'pyte'
"Plugin 'oceanlight'

call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC OPTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn on syntax highlighting
syntax on

set number                  " Show line numbers
set relativenumber          " Show relative numbers, except on current line
"set autowrite               " Autowrite after commands
set shiftwidth=4            " Number of indent spaces
set expandtab               " Expand tabs to spaces
set tabstop=4               " Number of spaces for a tab
set smartindent             " Smart indentation when starting new line
set hls                     " Highlight previous search
set is                      " Highlight search incrementally
set ruler                   " Ruler
set cursorline              " Highlight current line
set cursorcolumn            " Highlight current line
set scrolloff=3             " Show a few lines above and below when scrolling
set ignorecase              " Ignore case when searching
set smartcase               " except if there's an uppercase character
set splitright              " Split vertically to the right
set showmatch               " Jump to matching bracket briefly
set hidden				    " Hidden buffers don't need to be saved.
set lazyredraw			    " Don't redraw during macros
set wildmenu			    " Better command autocompletion
set display+=lastline       " Display as much as possible of last line
set encoding=utf-8		    " Use UTF-8
set textwidth=80            " Wrap comments at 80 chrs
set updatetime=500          " Wait before fetching type/symbol information
set laststatus=2            " Always show status line
set showtabline=2           " Always show tabline
set noshowmode              " Don't display mode message (use airline instead)
set completeopt-=preview    " Don't show completion information in preview window
set diffopt+=vertical       " Do diffs vertically
set bs=start,eol,indent     " Fix backspace
set confirm                 " Ask for confirmation instead of failing for :q etc.
set nowrap                  " Don't wrap lines
set t_Co=256                " Number of colors, required for tmux
set mouse=a	                " Enable mouse support
"set spell 					" Lets try out spell checking in comments
set exrc                    " Enable project-specific .vimrc
set secure                  " Add security features for project-specific vimrc's
set signcolumn=yes          " Show signcolumn (gitgutter column)


" Formatting options
set formatoptions=""
set formatoptions+=j	    " Remove comment character(s) when joining lines
set formatoptions+=c	    " Autowrap comments
set formatoptions+=q        " Allow format comments with "gq"
set formatoptions+=n        " Recognize lists

" Horribly complex pattern to recognize lists for formatoptions+=n
set formatlistpat=\\(^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*\\|^\\*\\+\\s*\\)
"
"set formatoptions-=ro       " Don't autoinsert comment characters after o or
"<Enter>

"set splitbelow            " Split horizontally down
"set autochdir			  " Automatically chdir when editing file

" Set swp file directory to prevent .swp files from polluting the filesystem
set backupdir=$HOME/.vim/swpfiles/
set directory=$HOME/.vim/swpfiles/

" Save undo information
set undodir=$HOME/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

" View dir
set viewdir=$HOME/.vim/view

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LOOK OPTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('gui')
    set macligatures
	"set guifont=Source\ Code\ Pro:h16
	"set guifont=Operator\ Mono\ Book:h16
	set guifont=Fira\ Code\ Light:h17
endif

set termguicolors
set background=light
"colorscheme solarized
"colorscheme base16-solarized-light
"colorscheme base16-atelier-estuary
"colorscheme base16-darktooth
colorscheme base16-woodland
"colorscheme gruvbox
"colorscheme base16-solarized-light

if &term =~# '^screen'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

set term=xterm-256color

" Remove scrollbars from gui.
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L
set guioptions-=b
set guioptions-=e

" Console instead of popup
"set guioptions+=c

" Make text italic for various things
"hi Comment gui+=italic
"hi Keyword gui+=italic
"hi StorageClass gui+=italic
"hi Type gui+=italic
"hi csModifier gui+=italic
"hi csType gui+=italic

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Comma is <leader>
let mapleader = ","

" Remove highlighting with backspace
nmap <bs> :noh <CR>

" Esc twice saves buffer in normal mode
nnoremap <Esc><Esc> :w<CR>

" Use space as an alias for : in normal mode
nnoremap <Space> :
vnoremap <Space> :

" Enter moves a line down in normal mode
nmap <CR> O<C-c>j

" Delete clears a line
nmap <Del> cc<Esc>

" Move text using Alt+[jk]
nmap √ mz:m+<Cr>`z
nmap ª mz:m-2<Cr>`z
vmap ª :m'<-2<Cr>`>my`<mzgv`zo`y
vmap √ :m'>+<Cr>`<my`>mzgv`yo`z

" Use jk to exit insertion and command mode
inoremap jk <C-c>
cnoremap jk <C-c>

if has("nvim")
    tnoremap <S-Left>  <C-\><C-n><C-w>h
    tnoremap <S-Right> <C-\><C-n><C-w>l
    tnoremap <S-Up>    <C-\><C-n><C-w>k
    tnoremap <S-Down>  <C-\><C-n><C-w>j
endif

" Use arrow keys to move between window splits
nnoremap <Left>  <C-w>h
nnoremap <Right> <C-w>l
nnoremap <Up>    <C-W>k
nnoremap <Down>  <C-W>j

" Use shift-arrow keys to manipulate buffers
nnoremap <S-Left>  :bp<CR>
nnoremap <S-Right> :bn<CR>
nnoremap <S-Up>    :enew<CR>
nnoremap <S-Down>  :execute "bdel " . bufnr('%')<CR>

autocmd FileType netrw nnoremap <buffer> <S-Left>  :bp<CR>
autocmd FileType netrw nnoremap <buffer> <S-Right> :bn<CR>
autocmd FileType netrw nnoremap <buffer> <S-Up>    :enew<CR>
autocmd FileType netrw nnoremap <buffer> <S-Down>  :execute "bdel " . bufnr('%')<CR>

" Use ctrl-arrow keys to move windows
nnoremap <C-Left>  <C-W>H
nnoremap <C-Right> <C-W>L
nnoremap <C-Up>    <C-W>K
nnoremap <C-Down>  <C-W>J

" H/L instead of $^
noremap H ^
noremap L $

" Change unimpaired forwards and backwards keys
map Ö [
map! Ö [
map Ä ]
map! Ä ]

" Make ö/ä go thorugh whitespace lines
" ({ and } don't work like they should, they skip lines that are only
" whitespace)
"nnoremap <silent> ö :call search('^\s*$', 'bW')<CR>
"onoremap <silent> ö :call search('^\s*$', 'bW')<CR>
"xnoremap ö {
"nnoremap <silent> ä :call search('^\s*$', 'W')<CR>
"onoremap <silent> ä :call search('^\s*$', 'W')<CR>
"xnoremap ä }
map  ö {
map  ä }
map! ö {
map! ä }


" +/- goes up/down the quickfix list, use alt to go through location list
nnoremap <silent> - :cprev<CR>
nnoremap <silent> + :cnext<CR>
nnoremap <silent> – :lprev<CR>
nnoremap <silent> ± :lnext<CR>

" Shift Keypad +/- goes up/down the location list
nnoremap <S-kMinus> :lprev<CR>
nnoremap <S-kPlus>  :lnext<CR>

nnoremap <leader>ss :%s///gc<left><left><left>

" Select all
nnoremap <leader>sa ggvG$

" Search for word with :grep
nnoremap <silent> <leader>r :silent execute "grep " . substitute("<C-r>/", "[<>]", "", "g")<CR>

" Fix trailing whitespace (including empty lines)
function! FixWhitespace()
	normal mz
	%s/\s\+$//e
	normal `z
	echo "Whitespace fixed"
endfunction

nnoremap <silent> <leader>f :call FixWhitespace()<CR>

" j/k scrolls screen lines instead of logical lines
nnoremap j gj
nnoremap k gk

" Don't move the cursor after pasting
"nnoremap p p`[h
"nnoremap P P`[

" Replace current word with latest yank (mnemonic "stamp word"),
nnoremap S mzviw"0p`z

" Paste and bump first digit. Takes a count.
"nnoremap <silent> § :normal pyy<CR>:silent! call repeat#set("§", v:count)<CR>'[
nnoremap <silent> <C-p> :normal pyy<CR>'[

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMAND CUSTOMIZATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! Rc :e ~/.vimrc
command! SyntaxGroup echo synIDattr(synID(line("."),col("."),0),"name")
set grepprg=rg\ --vimgrep\ --smart-case\ --word-regexp
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set correct syntax highlighting
autocmd BufNewFile,BufRead *.pl set filetype=prolog
autocmd BufNewFile,BufRead *.md set filetype=markdown

" Turn off expandtabs for certain filetypes
autocmd BufNewFile,BufRead makefile set noexpandtab
autocmd BufNewFile,BufRead *.cs set noexpandtab

" Proper python indents on all important keywords
autocmd FileType python setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class

" Automatically open quickfix window after any grep
autocmd QuickFixCmdPre *grep* copen

" Javascript settings
autocmd FileType javascript,json setlocal ts=2 sw=2 expandtab

" make views
"autocmd BufWinLeave *.cs mkview!
"autocmd BufWinEnter *.cs silent loadview

" Better help
autocmd FileType help nnoremap <buffer> <CR> <C-]>
autocmd FileType help nnoremap <buffer> <BS> <C-T>
autocmd FileType help wincmd L

" Always wrap quickfix
autocmd FileType qf set wrap
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic settings
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_cs_checkers = ['syntax', 'semantic']

" OmniSharp settings
let g:OmniSharp_timeout=10
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
autocmd FileType cs nnoremap <leader>or  :OmniSharpAddToProject<CR>:OmniSharpReloadSolution<CR>:OmniSharpBuild<CR>
autocmd FileType cs nnoremap <leader>ot  :OmniSharpFindType<CR>
autocmd FileType cs nnoremap <leader>otl :call OmniSharp#TypeLookupWithoutDocumentation()<CR>
autocmd FileType cs nnoremap <leader>od  :vsp<CR>:OmniSharpGotoDefinition<CR>
autocmd FileType cs nnoremap <leader>ou  :OmniSharpFindUsages<CR>
autocmd FileType cs nnoremap <leader>ous :OmniSharpFixUsings<CR>
autocmd FileType cs nnoremap <leader>oa  :OmniSharpGetCodeActions<CR>
autocmd FileType cs nnoremap <leader>on  :OmniSharpRename<CR>
"autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck
"autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

" YouCompleteMe settings
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']
let g:ycm_auto_trigger = 1
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"

" CtrlP settings
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = ['.git', 'cd %s && rg --files-with-matches ".*"', 'find %s -type f']
au FileType cs let g:ctrlp_user_command = ['.git', 'cd %s && rg --files-with-matches ".*" --glob "*.cs"', 'find %s -type f']

" Vim-Dash settings
nmap <silent> <leader>d <Plug>DashSearch

" Vim-airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_powerline_fonts = 1
"let g:airline_left_sep = ''
"let g:airline_right_sep = ''
let g:airline_symbols.branch = '⑂'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#checks = ['mixed-indentfile']
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Markdown preview
let vim_markdown_preview_github=1

" Vim-wiki
let g:vimwiki_list = [{'path': '~/Dropbox/Wiki/Source', 'path_html': '~/Dropbox/Wiki/HTML'}]
autocmd BufWinEnter *.wiki setlocal shiftwidth=2 tabstop=2 expandtab

" Tagbar
nnoremap <silent> T :TagbarToggle<CR>
let g:tagbar_sort = 0

" Colorstepper
nmap <F6> <Plug>ColorstepPrev
nmap <F7> <Plug>ColorstepNext
nmap <S-F7> <Plug>ColorstepReload
