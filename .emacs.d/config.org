Oskars emacs configuration file

* Basic emacs options
** Fix path
Fix the path so that homebrew stuff is included. Also my local bin
folder, at the top.

#+BEGIN_SRC emacs-lisp
  (defun gk/add-dir-to-path (dir)
    "Add a single directory to both exec-path and $PATH"
    (add-to-list 'exec-path dir)
    (setenv "PATH" (concat dir ":" (getenv "PATH"))))

  (gk/add-dir-to-path "/usr/local/bin")
  (gk/add-dir-to-path (concat (getenv "HOME") "/bin"))
#+END_SRC

** Evil/org-mode setting
This setting is necessary to make evil/org work together in a terminal
successfully. It needs to be set before any part of evil-mode is
loaded, so do it pretty early here. 

#+BEGIN_SRC emacs-lisp
  (unless (display-graphic-p)
    (setq evil-want-C-i-jump nil))
#+END_SRC

** WSL handling
Set a a special variable to indicate that we're on WSL. It is detected
by checking if the folder "/mnt/c" exists. Also creates c:/emacs
directory for emacs communication

UPDATE: i don't use WSL any more so lets comment out this section

#+BEGIN_SRC emacs-lisp
  ;; (setq emacs-on-wsl (file-directory-p "/mnt/c"))
  ;; (setq emacs-wsl-directory "/mnt/c/emacs")

  ;; (when emacs-on-wsl (make-directory emacs-wsl-directory t))

  ;; (defun gk/emacs-wsl-delete-server-file ()
  ;;   "Delete the server file from windows"
  ;;   (delete-file (gk/emacs-wsl-server-file)))

  ;; (defun gk/emacs-wsl-server-file ()
  ;;   "The file containing server details on WSL"
  ;;   (concat (file-name-as-directory emacs-wsl-directory) "server"))

  ;; (defun gk/emacs-wsl-copy-server-file ()
  ;;   "Copy the server file from WSL to windows. Used in server-mode-hook"
  ;;   (let ((source (concat (file-name-as-directory server-auth-dir) "server"))
  ;;         (destination (gk/emacs-wsl-server-file)))
  ;;     (if server-mode (copy-file source destination t) (gk/emacs-wsl-delete-server-file))))

  ;; (when emacs-on-wsl
  ;;   (setq server-use-tcp t)

  ;;   (add-hook 'server-mode-hook 'gk/emacs-wsl-copy-server-file)
  ;;   (add-hook 'kill-emacs-hook 'gk/emacs-wsl-delete-server-file))
#+END_SRC

** Start server
Start the server so that you can use emacsclient. To edit a file from
the terminal use `emacs-edit`

#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC

** Custom file

Don't want the custom file polluting the main config file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC   

** Disable clipboard integration with registers
Emacs clobbers the clipboard a little too readily, so I'm going to try
turning the automatic integration off. Still enable it with regular Cmd-C/X/V

#+BEGIN_SRC emacs-lisp
  (setq select-enable-clipboard nil)
  (global-set-key (kbd "s-c") 'clipboard-kill-ring-save)
  (global-set-key (kbd "s-v") 'clipboard-yank)
  (global-set-key (kbd "s-x") 'clipboard-kill-region)
#+END_SRC

** Make the bell less noisy
I hate the emacs bell. I'm thinking of maybe just disabling it
entirely, but I'm doing this dumb thing instead.[[https://www.emacswiki.org/emacs/AlarmBell][ From here.]]

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function
        (lambda ()
          (unless (memq this-command '(isearch-abort
                                       abort-recursive-edit
                                       exit-minibuffer
                                       keyboard-quit
                                       keyboard-escape-quit))
            (ding))))
#+END_SRC

At the very least, make it visible instead of audible

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

** Backup settings
Emacs pollutes the file system way to much with weird lockfiles and
backups. This probably helps. Got it from emacswiki or something.

#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   create-lockfiles nil)

  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

** Basic emacs keys
Right Cmd is meta, option is just option. Remapping escape to be more
impactful.

#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'meta)
  (setq mac-right-command-modifier 'meta)
  (setq mac-right-option-modifier nil)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

However, 'keyboard-escape-quit should never close windows, that's just
annoying

#+BEGIN_SRC emacs-lisp
  ;; from https://stackoverflow.com/a/40390199/220961

  (defadvice keyboard-escape-quit
    (around keyboard-escape-quit-dont-close-windows activate)
    (let ((buffer-quit-function (lambda () ())))
      ad-do-it))
#+END_SRC

Keypad-dot is period, not a comma 

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<kp-delete>") ".")
#+END_SRC

F11/F12 to start/stop the profiler

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f11>") (lambda () (interactive) (profiler-start 'cpu)))
  (global-set-key (kbd "<f12>") (lambda () (interactive) (profiler-report) (profiler-stop)))
#+END_SRC

On macOS, disable s-q (i.e. Cmd+Q) for quitting. It's too close to M-q (which
formats paragraphs) and I keep hitting it by mistake. I never exit emacs this
way anyway, it's always either C-x C-c or :q anyway

#+BEGIN_SRC emacs-lisp
    (when (string-equal system-type "darwin")
      (global-set-key (kbd "s-q") (lambda () (interactive) (message "Cmd+Q disabled"))))
#+END_SRC

** Use mouse in terminal

#+BEGIN_SRC emacs-lisp
  (unless (display-graphic-p)
    (xterm-mouse-mode 1))
#+END_SRC

** Swap swedish keys for control characters
I should make this into a minor mode...

#+BEGIN_SRC emacs-lisp
   (defun gk/swap-keys (k1 k2)
     "Swap two keys on a low level"
     (keyboard-translate k1 k2)
     (keyboard-translate k2 k1))

  (define-minor-mode swedish-keyswap-mode
    "A minor mode that swaps swedish keys for more useful programming keys"
    :global t
    (cond (swedish-keyswap-mode
        (progn
          (gk/swap-keys ?ö ?\{)
          (gk/swap-keys ?ä ?\})
          (gk/swap-keys ?Ö ?\[)
          (gk/swap-keys ?Ä ?\])
          (gk/swap-keys ?å ?^)
          (gk/swap-keys ?Å ?$)))
       (t
      (progn
        (keyboard-translate ?ö ?ö)
        (keyboard-translate ?ä ?ä)
        (keyboard-translate ?Ö ?Ö)
        (keyboard-translate ?Ä ?Ä)
        (keyboard-translate ?å ?å)
        (keyboard-translate ?Å ?Å)
        (keyboard-translate ?\{ ?\{)
        (keyboard-translate ?\} ?\})
        (keyboard-translate ?\[ ?\[)
        (keyboard-translate ?\] ?\])
        (keyboard-translate ?^ ?^)
        (keyboard-translate ?$ ?$)))))

   ;; (when (display-graphic-p)
   ;;   (swedish-keyswap-mode 1))

#+END_SRC

** Scroll options
Scrolling how I like it. scroll-conservatively makes it so that
scolling across the screen doesn't recenter the line.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 101)
  (setq scroll-margin 5)
#+END_SRC

** Sentences end in single space.
The default value is insanity.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Fix whitespace before saving
#+BEGIN_SRC emacs-lisp
  ; (add-hook
  ;  'before-save-hook
  ;  (lambda ()
  ;    (when (and (bound-and-true-p evil-mode) (evil-normal-state-p))
  ;      (delete-trailing-whitespace))))
#+END_SRC

*** DONE don't do this if we're in insert state
This combined with "save with defocus has a problem, which is that if
you're in insert state on an empty indented line, ready to start
typing but you switch focus, the indentation disappears (because when
you defocus, it saves, and when it saves, it removes trailing
whitespace)

FIXED: only fix whitespace on defocus when you're in evil-normal-state

** Save on defocus
Save all file-tracking buffers on defocus. Neat!

#+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+END_SRC

** Use y/n instead of yes / no
Simpler prompt

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Global auto-revert
Reload files that change on disk, through git or other editors or
whatever.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Tab settings
Tabs are 4 characters, c offset is 4, and replace tabs with spaces by
default.

#+BEGIN_SRC emacs-lisp
  (setq-default
   tab-width        4
   c-basic-offset   4
   indent-tabs-mode t)
#+END_SRC

** Compile/recompile with F5

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "S-<f5>") 'compile)
  (global-set-key (kbd "<f5>") 'recompile)
#+END_SRC

** Enable recentf
#+BEGIN_SRC emacs-lisp
  (recentf-mode)
#+END_SRC

** Adjust garbage collection settings
When profiling, "Automatic GC" shows up every time with like 20% of
the time. The original GC threshold is like 800kb, which is not very
much. The downside of setting it to a larger value is that each
individual garbage collection might take far longer, even if they are
way less frequent. 

To prevent that, set an idle timer that runs the garbage collection
after 30 seconds of idling. If emacs idles for 30 seconds, it's
probably not in focus (or the computer is locked), so it's fine to run
GC, regardless of how long it takes.

Setting the threshold to 1 gigabyte and running GC in an idle timer
will hopefully both prevent emacs from taking up too much memory, as
well as preventing GC from running while typing. 

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 1024 1024 1024))
  (run-with-idle-timer 15 t #'garbage-collect)
#+END_SRC

** Superword mode
#+BEGIN_SRC emacs-lisp
  ;; (global-superword-mode 1)

  (add-hook 'prog-mode-hook (lambda() (modify-syntax-entry ?_ "w")))
#+END_SRC

** Safe variables for dir-locals
#+BEGIN_SRC emacs-lisp
  (advice-add 'risky-local-variable-p :override #'ignore)
#+END_SRC

* Custom functions
** Move lines up/down
Move lines up and down. I usually bind these to Alt+j/k in normal
state. Functions from: [[https://www.emacswiki.org/emacs/MoveLine][EmacsWiki: Move Line]]

#+BEGIN_SRC emacs-lisp
  (defmacro save-column (&rest body)
    `(let ((column (current-column)))
       (unwind-protect
           (progn ,@body)
         (move-to-column column))))
  (put 'save-column 'lisp-indent-function 0)

  (defun gk/move-line-up ()
    (interactive)
    (save-column
      (transpose-lines 1)
      (forward-line -2)))

  (defun gk/move-line-down ()
    (interactive)
    (save-column
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)))
#+END_SRC

** Insert empty line
Move line down, inserting an empty line. Usually mapped to RET in
normal state.
#+BEGIN_SRC emacs-lisp
  (defun gk/insert-empty-line (count)
    (interactive "p")
    (save-excursion
      (beginning-of-line)
      (open-line count)))
#+END_SRC

** Kill number and put it into calc
#+BEGIN_SRC emacs-lisp
  (defun gk/kill-number-into-calc ()
    (interactive)
    (save-excursion
      (let ((start (point))
            (end (progn
            (re-search-forward "[0-9]*\\(.[0-9]*\\)?" (line-end-position) t)
                   (point))))
        (kill-region start end)))
    (calc)
    (calc-yank 0))
#+END_SRC

*** DONE make it work for floats
** Show face under cursor
#+BEGIN_SRC emacs-lisp
  (defun gk/face-at-position (pos)
    "Find face at position"
    (or (get-char-property (point) 'read-face-name)
        (get-char-property (point) 'face)))

  (defun gk/what-face (pos)
    "Find out what face is under the cursor"
    (interactive "d")
    (message "%s" (gk/face-at-position pos)))

  (defun gk/customize-face-under-cursor (pos)
    "Customize face under cursor"
    (interactive "d")
    (if-let ((face (gk/face-at-position pos)))
        (customize-face face)
      (message "Can't find face under cursor")))

#+END_SRC

** Compile with make
Run compile with makefile in first ancestor directory with one in it.

#+BEGIN_SRC emacs-lisp
  (defun gk/compile-with-make ()
    "Get folder containing makefile, upwards in hierarchy"
    (interactive)
    (compile (format "make -C %s" (locate-dominating-file "." "Makefile"))))


#+END_SRC

** Change default font sizes
Functions to change the default font size. I don't like emacs default
implementation of this, it changes the font size buffer-locally.

#+BEGIN_SRC emacs-lisp
  (defun gk/increase-default-font-size (&optional step)
    "Increase the default font size"
    (interactive "P")
    (let* ((old-size (face-attribute 'default :height))
           (new-size (+ old-size (or step 10))))

      (set-face-attribute 'default nil :height new-size)

      (message (concat "Default font size is now " (number-to-string new-size)))))

  (defun gk/decrease-default-font-size (&optional step)
    "Decrease the default font size"
    (interactive "P")
    (gk/increase-default-font-size (- 0 (or step 10))))
#+END_SRC

** Rename and move open buffer file
From [[https://stackoverflow.com/a/384346/220961][stack overflow]]. This is a little bit hinky, but it more or less works.  

#+BEGIN_SRC emacs-lisp
  (defun gk/rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
#+END_SRC

** New buffer with default name
#+BEGIN_SRC emacs-lisp
  (defun gk/new-buffer (&optional template number)
    (interactive)
    (let* ((template (or template "/tmp/new-buffer-%d"))
           (number (or number 0))
           (name (format template number)))
      (if (file-exists-p name)
          (gk/new-buffer template (+ 1 number))
        (progn
          (message (format "Creating new buffer %s" name))
          (find-file name)))))

  (defun gk/new-buffer-clean (&optional dir template)
    (interactive)
    (let* ((template (or template "new-buffer-"))
           (dir (or dir "/tmp"))
           (files (directory-files dir t template)))
      (mapcar #'delete-file files)))
	
#+END_SRC

** Add buffer-local hook
#+BEGIN_SRC emacs-lisp
  (defun gk/add-buffer-local-hook (hook func)
    (interactive "SHook: \naFunction: ")
    (add-hook hook func nil t))
#+END_SRC

** Stamp function
#+BEGIN_SRC emacs-lisp
  (defun gk/stamp-word ()
    "Replace current word with whatever's in the kill ring"
    (interactive)
    (save-excursion
      (let ((bounds (if (use-region-p)
                        (cons (region-beginning) (region-end))
                      (bounds-of-thing-at-point 'word))))
        (delete-region (car bounds) (cdr bounds))
        (yank))))
#+END_SRC

** Save buffer even if modified
#+BEGIN_SRC emacs-lisp
  (defun gk/save-buffer-always()
    "Forces save-buffer, even if file is not modified"
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

#+END_SRC

* Look options
** Theme
*** Gruvbox
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :straight t
    :config
    (load-theme 'gruvbox-dark-hard t)

    ;; I don't quite understand why, but if this runs synchronously it
    ;; can't find the faces
    (run-at-time
     1 nil
     (lambda()
       (let ((diff-red    "#650004")
             (diff-green  "#555100")
             (diff-yellow "#5c3c00"))
         (set-face-attribute 'diff-changed nil :background diff-yellow :foreground nil)
         (set-face-attribute 'diff-added   nil :background diff-green  :foreground nil)
         (set-face-attribute 'diff-removed nil :background diff-red    :foreground nil)
         (set-face-attribute 'diff-indicator-changed nil :inherit 'diff-changed)
         (set-face-attribute 'diff-indicator-added   nil :inherit 'diff-added)
         (set-face-attribute 'diff-indicator-removed nil :inherit 'diff-removed)
         (set-face-attribute 'highlight nil :foreground nil :background "#504945")))))
#+END_SRC   

** Faces
The most important setting of all!

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 200 :foundry "Matt" :family "Triplicate T4c")
  ;; (set-face-attribute 'default nil :height 220 :weight 'thin :foundry "Matt" :family "Operator Mono")
#+END_SRC


Use italics and bold more liberally.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'font-lock-type-face nil :slant 'italic)
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :weight 'bold)
#+END_SRC

The "outline" faces are what's used for org headlines (at least in
base16 themes), and they inherit from the faces i customized above,
which leads to various org headlines being bold and italic. So,
hard-set these headlines to be regular weight and slant.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'outline-1 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-2 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-3 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-4 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-5 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-6 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-7 nil :weight 'normal :slant 'normal)
  (set-face-attribute 'outline-8 nil :weight 'normal :slant 'normal)
#+END_SRC

** GUI
No toolbar or scrollbar. Maybe no fringe?

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;;(set-face-attribute 'fringe nil :background nil)

  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) 
#+END_SRC

Enable relative line numbers

#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers t)
#+END_SRC

But no line numbers in magit

#+BEGIN_SRC emacs-lisp
  (add-hook 'magit-pre-display-buffer-hook
            (lambda () (setq display-line-numbers nil)))
#+END_SRC

Highlight current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Start maximized

#+BEGIN_SRC emacs-lisp
  (toggle-frame-maximized)
#+END_SRC

No menu bar
#+BEGIN_SRC emacs-lisp
  (unless (display-graphic-p)
    (menu-bar-mode -1))
#+END_SRC

** Matching parens
Highlight matching parens

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Truncate lines
No wrapping, basically. I'm not sure I like this for every buffer,
maybe just code?

#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
#+END_SRC

Definitely do wrap the compilation and minibuffer though

#+BEGIN_SRC emacs-lisp
  (add-hook 'compilation-mode-hook (lambda () (setq truncate-lines nil)))
  (add-hook 'minibuffer-setup-hook (lambda () (setq truncate-lines nil)))
#+END_SRC

* Packages
** General key binding
Not sure i need this, really. Maybe I should try redoing my keymaps in
an "emacs native" way.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t)
#+END_SRC

** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :straight t)
#+END_SRC

** Company
Company for autocompletion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :bind (:map company-active-map
            ("<return>" . nil)
            ("RET" . nil)
            ("<tab>" . #'company-complete-common)
            ("M-<tab>" . #'company-complete-selection)
            :map prog-mode-map
            ("<tab>" . #'company-complete))
     :config
     (global-company-mode t)

    ;; (add-to-list 'company-backends 'company-files)
    ;; (setq company-backends '(company-capf company-files))


    (add-hook 'text-mode-hook (lambda () (company-mode -1))))

#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-global-mode +1))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :config
    (setq magit-no-confirm '(stage-all-changes unstage-all-changes))
    (add-to-list 'magit-section-initial-visibility-alist '(stashes . hide)))
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
     :straight t
     :config (which-key-mode 1))
#+END_SRC

** ledger

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    ;:load-path "~/.emacs.d/extra-packages/ledger-mode"
    :straight t
    :config
    (when (string-equal system-type "darwin")
      (setq-default ledger-binary-path "/usr/local/bin/ledger"))

    ;; (add-to-list 'evil-motion-state-modes 'ledger-report-mode)
    ;; (add-to-list 'evil-motion-state-modes 'ledger-reconcile-mode)

    (setq ledger-clear-whole-transactions t
          ledger-reconcile-default-commodity "kr"

          ;; ledger-reconcile-buffer-account-max-chars 16
          ledger-reconcile-buffer-line-format "%(date)s %-22(payee)s %-16(account)s %12(amount)s\n"
          ledger-reconcile-buffer-payee-max-chars 20
          ledger-reconcile-default-commodity "kr")

    ;; (add-to-list 'evil-emacs-state-modes 'ledger-mode)
    ;; (add-to-list 'evil-emacs-state-modes 'ledger-reconcile-mode)
    ;; (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    )
#+END_SRC

** neotree
#+BEGIN_SRC emacs-lisp
    (use-package neotree
      :straight t
      :config
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
      (setq projectile-switch-project-action 'neotree-projectile-action))
#+END_SRC

** expand-region
Expands region by semantic units

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :config
    (global-set-key (kbd "C-+") 'er/expand-region))
#+END_SRC

** tabnine
Lets try this thing out!

#+BEGIN_SRC emacs-lisp
  ;; (when (display-graphic-p)
  ;;   (use-package company-tabnine
  ;;     :straight t
  ;;     :config
  ;;     (add-to-list 'company-backends #'company-tabnine)))
#+END_SRC

To install binary, run `M-x company-tabnine-install-binary`

** Telephone line
For the modeline

#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :straight t
    :config

    (defface telephone-line-modified
      '((t (:background "dark blue" :inherit mode-line)))
      "Face for indicating modified buffers"
      :group 'telephone-line)

    (defcustom telephone-line-modified-text
      "*"
      "Text to indicate a buffer is modified"
      :group 'telephone-line
      :type 'string)

    (telephone-line-defsegment* telephone-line-is-modified-segment ()
      (when (buffer-modified-p) telephone-line-modified-text))

    (defun telephone-line-modified-face (active)
      (cond ((not active) 'mode-line-inactive)
            ((buffer-modified-p) 'telephone-line-modified)
            (t 'mode-line)))

    (add-to-list 'telephone-line-faces '(modified . telephone-line-modified-face))

    (setq telephone-line-primary-left-separator 'telephone-line-flat
          telephone-line-secondary-left-separator 'telephone-line-flat
          telephone-line-primary-right-separator 'telephone-line-flat
          telephone-line-secondary-right-separator 'telephone-line-flat)

    (setq telephone-line-lhs
          '((evil telephone-line-evil-tag-segment)
            (modified telephone-line-is-modified-segment)
            (accent telephone-line-vc-segment telephone-line-erc-modified-channels-segment telephone-line-process-segment)
            (nil telephone-line-buffer-segment)))

    (when (display-graphic-p)
      (telephone-line-mode 1)))
#+END_SRC

** Vdiff
#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :straight t
    :config
    (setq vdiff-subtraction-fill-char ? )
    (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)

    (use-package vdiff-magit
      :straight t
      :config
      (define-key magit-mode-map "e" 'vdiff-magit-dwim)
      (define-key magit-mode-map "E" 'vdiff-magit)
      (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
      (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
      (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
      (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)))

#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t
    :config
    (defhydra hydra-zoom (global-map "<f6>")
      "zoom"
      ("j" gk/increase-default-font-size)
      ("k" gk/decrease-default-font-size)))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :straight t
      :config
      (add-hook 'prog-mode-hook #'flycheck-mode))
#+END_SRC

** yasnippets
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :straight t
     :config
     (yas-global-mode 1))
  ;;   ;(add-to-list 'company-backends 'company-yasnippet))

  (use-package yasnippet-snippets
    :after yasnippet
    :straight (yasnippet-snippets :type git :host github
                                  :repo "oskarsigvardsson/yasnippet-snippets"))
#+END_SRC

** undo-tree
Save persistent history with undo tree
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+END_SRC

** Dash
#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :straight t
    :config
    (add-hook 'evil-mode-hook
              (lambda()
                (general-define-key
                 :states 'normal
                 ",d" 'dash-at-point))))
#+END_SRC

** realgud/lldb
#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :straight t)

  (use-package realgud-lldb
    :straight t)
#+END_SRC

** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t)
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp  
  (use-package flx
    :straight t)

  (use-package ivy
    :straight t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers 1)
    ;; (setq ivy-height 20)
    )

  (use-package counsel
    :straight t
    :config
    (counsel-mode 1))

  (use-package ivy-rich
    :straight t
    :config (ivy-rich-mode 1))

  (use-package prescient
    :straight t)

  (use-package ivy-prescient
    :straight t)

  (use-package ivy-posframe
    :custom-face
    (internal-border ((t (:background "#cccccc"))))
    :straight t
    :config
    (setq ivy-posframe-parameters
          '((left-fringe . 8)
            (right-fringe . 8))
          ivy-posframe-border-width 10
          ivy-posframe-style 'frame-center)

    (setq ivy-posframe-size-function
          (lambda ()
            (let ((width (floor (* 0.75 (frame-width))))
                  (height (floor (* 0.75 (frame-height)))))
              (list
               :height height
               :width width
               :min-height height
               :min-width width))))

    (ivy-posframe-mode 1))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :straight t
    :config

    ;; (general-define-key
    ;;  "M-x"     'helm-M-x
    ;;  "C-M-x"   'execute-extended-command
    ;;  "C-h a"   'helm-apropos
    ;;  "C-x b"   'helm-mini
    ;; )

    (use-package helm-ls-git
      :straight t)

    (defun helm-rg-git-root (arg)
      "Run helm-do-grep-ag in git root level, if there is one, otherwise default-directory"
      (interactive "P")
      (let* ((git-root (magit-toplevel))
             (directory (if git-root git-root default-directory)))
        (helm-grep-ag directory arg)))

    (setq helm-grep-ag-command
          "rg --color=always --smart-case --no-heading --line-number %s %s %s")

    (defhydra hydra-helm (:hint nil :color pink)
      "
                                                                            ╭──────┐
     Navigation   Other  Sources     Mark             Do             Help   │ Helm │
    ╭───────────────────────────────────────────────────────────────────────┴──────╯
          ^_k_^         _K_       _p_   [_m_] mark         [_v_] view         [_H_] helm help
          ^^↑^^         ^↑^       ^↑^   [_t_] toggle all   [_d_] kill         [_s_] source help
      _h_ ←   → _l_     _c_       ^ ^   [_u_] unmark all   [_f_] follow: %(helm-attr 'follow)
          ^^↓^^         ^↓^       ^↓^    ^ ^               [_y_] yank selection
          ^_j_^         _J_       _n_    ^ ^               [_w_] toggle windows
    --------------------------------------------------------------------------------
          "
      ("<tab>" helm-keyboard-quit "back" :exit t)
      ("<escape>" nil "quit")
      ("\\" (insert "\\") "\\" :color blue)
      ("h" helm-beginning-of-buffer)
      ("j" helm-next-line)
      ("k" helm-previous-line)
      ("l" helm-end-of-buffer)
      ("g" helm-beginning-of-buffer)
      ("G" helm-end-of-buffer)
      ("n" helm-next-source)
      ("p" helm-previous-source)
      ("K" helm-scroll-other-window-down)
      ("J" helm-scroll-other-window)
      ("c" helm-recenter-top-bottom-other-window)
      ("m" helm-toggle-visible-mark)
      ("t" helm-toggle-all-marks)
      ("u" helm-unmark-all)
      ("H" helm-help)
      ("s" helm-buffer-help)
      ("v" helm-execute-persistent-action)
      ("d" helm-buffer-run-kill-persistent)
      ("y" helm-yank-selection)
      ("w" helm-toggle-resplit-and-swap-windows)
      ("f" helm-follow-mode))

    (define-key helm-map (kbd "C-k") 'hydra-helm/body))
#+END_SRC

* Evil mode
** Keymaps
#+BEGIN_SRC emacs-lisp
  (defun evil-set-keys ()
    (general-define-key
     :states 'normal
     ",s"                'mark-whole-buffer
     ",f"                'counsel-find-file
     ",p"                'counsel-git
     ",b"                'counsel-switch-buffer
     ",m"                'magit-status
     ",g"                'counsel-rg
     ",k"                'kill-this-buffer
     ",h"                'counsel-apro
     ",c"                'gk/kill-number-into-calc
     "√"                 'gk/move-line-down
     "ª"                 'gk/move-line-up
     "M-p"               'evil-paste-increment-and-yank
     "S"                 'gk/stamp-word
     "+"                 'flycheck-next-error
     "-"                 'flycheck-previous-error
     "<deletechar>"      'clear-line
     "<left>"            'evil-window-left
     "<right>"           'evil-window-right
     "<up>"              'evil-window-up
     "<down>"            'evil-window-down
     "<backspace>"       'evil-ex-nohighlight
     "RET"               'gk/insert-empty-line
     "z"                 'gk/save-buffer-always
     "SPC"               'counsel-M-x)

    (general-define-key
     :states 'visual
     "gc"   'comment-region
     "gC"   'uncomment-region)

    (general-define-key
     :keymaps 'org-agenda-mode-map
     "j" 'evil-next-line
     "k" 'evil-previous-line))


    (add-hook 'evil-mode-hook 'evil-set-keys)
#+END_SRC

** Search module
Makes gn motion work in cgn/dgn
#+BEGIN_SRC emacs-lisp
  (setq evil-search-module 'evil-search)
#+END_SRC

** Use j/k to get out of insert mode
This works badly, so i'm disabling it for now. Since caps-lock has
been mapped to escape, it's no longer really needed as much.
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'evil-mode-hook
  ; (lambda ()
  ;   (use-package evil-escape
  ;     :straight t
  ;     :config
  ;     (evil-escape-mode t)
  ;     (setq-default evil-escape-key-sequence "jk"))))
#+END_SRC

** Alignment operator
#+BEGIN_SRC emacs-lisp
  (add-hook 'evil-mode-hook
   (lambda ()
     (use-package evil-lion
       :straight t
       :config
       (evil-lion-mode t))))
#+END_SRC

** Paste line and bump first number

#+BEGIN_SRC emacs-lisp
  (defun increment-first-number-in-line (inc)
    "Increment the first number in a line"
    (interactive "p")
    (save-match-data
      (save-excursion
        (let* ((match-number (lambda () (string-to-number (match-string 0))))
               (increment-match (lambda () (+ (or inc 1) (funcall match-number)))))
          (move-beginning-of-line nil)
          (cond ((re-search-forward "-?[0-9]+" (point-at-eol) t)
                 (replace-match (number-to-string (funcall increment-match)))))))))

(add-hook 'evil-mode-hook (lambda ()
  (evil-define-command evil-paste-increment-and-yank (repeat)
    "Paste, increment the first number in line, then yank again"
    (interactive "p")
    (evil-with-single-undo
      (save-excursion (evil-paste-after repeat))
      (dotimes (i repeat)
        (next-line)
        (increment-first-number-in-line (+ i 1)))
      (call-interactively 'evil-yank-line)))
))
#+END_SRC

*** TODO bump all numbers in line
** Delete to clear a line
#+BEGIN_SRC emacs-lisp
  (defun clear-line ()
    "Clear entire current line"
    (interactive)
    (move-beginning-of-line 1)
    (kill-line))
#+END_SRC

** Indent text object
Creates a new text object for indents, with keys ii and ai (i.e. dii,
vii, cii, etc)

#+BEGIN_SRC emacs-lisp
  (add-hook 'evil-mode-hook
            (lambda ()
              (use-package evil-indent-plus
                :straight t
                :config
                (evil-indent-plus-default-bindings))))
#+END_SRC

** Increment/decrement numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :straight t)
#+END_SRC

** Load it
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :config

	(use-package evil-magit :straight t)
    
(evil-mode t))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
;;(straight-use-package 'org)
#+END_SRC

Org mode folders
#+BEGIN_SRC emacs-lisp
   (setq org-directory           "~/Dropbox (Personal)/Org"
         org-archive-location    "~/Dropbox (Personal)/Org/archive.org::* Archive"
         org-default-notes-file  "~/Dropbox (Personal)/Org/todo.org"
         org-default-agenda-file "~/Dropbox (Personal)/Org/todo.org"
         org-agenda-files        '("~/Dropbox (Personal)/Org/todo.org")
         org-agenda-window-setup 'current-window)
#+END_SRC

Initialize babel (do i need to do this?)

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (python . t)
     (ledger . t)
     (shell . t)))
#+END_SRC

Don't ask for confirmation to execute stuff

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil        ;; for running code blocks
        org-confirm-elisp-link-function nil   ;; for elisp links
        org-confirm-shell-link-function nil)  ;; for shell links
#+END_SRC

** Agenda
Show two weeks in agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 14)

  (defun gk/redo-agenda-buffers ()
    "Redo all agenda buffers"
    (interactive)
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (derived-mode-p 'org-agenda-mode) 
          (org-agenda-redo)))))

  ;; (add-hook 'org-mode-hook
  ;; 		  (lambda () (add-hook 'after-save-hook #'gk/redo-agenda-buffers nil t))
#+END_SRC

** Capture
I should start using this at some point!
*** Key binding
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "C-c c" 'org-capture)
#+END_SRC

*** Templates
#+BEGIN_SRC emacs-lisp

#+END_SRC

** Evil
Better evil integration

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :straight t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))
#+END_SRC

Don't evil-autoindent in org
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (setq evil-auto-indent nil)))
#+END_SRC

Alt+j/k moves lines in evil mode, in org mode it moves headings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "√"          'org-metadown
   "ª"          'org-metaup)
#+END_SRC

ö/ä is paragraph motion in evil mode, Ö/Ä is heading motion in evil
mode.

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states '(motion visual)
   :keymaps 'org-mode-map
   "Ö" 'outline-previous-visible-heading
   "Ä" 'outline-next-visible-heading)
#+END_SRC
** Keys
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'org-mode-map
   "<C-M-return>" 'org-insert-heading-after-current)

  (general-define-key
   :keymaps 'org-src-mode-map
   :states 'normal
   "z" 'org-edit-src-exit)

#+END_SRC

** Fontify source code
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** Indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Auto-fill
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

** Trello
#+BEGIN_SRC emacs-lisp
  ; (use-package org-trello
  ;   :straight t
  ;   :config
  ;   (setq org-trello-files '("~/Dropbox/Org/Trello/alfie3.org"))
  ;   (add-hook 'org-trello-mode-hook (lambda () (setq truncate-lines nil))))
#+END_SRC

** Add pdflatex to path
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
#+END_SRC

** Reveal
#+BEGIN_SRC emacs-lisp
  (defun load-ox-reveal ()
    (interactive)
    "Load ox-reveal and restart org mode"

    (use-package ox-reveal :straight t)
    (org-reload))
#+END_SRC

* Languages
** Indentation
#+BEGIN_SRC emacs-lisp
  (c-set-offset 'arglist-intro '+)
  (c-set-offset 'inline-open '0)
  (c-set-offset 'arglist-cont '0)
  (c-set-offset 'arglist-cont-nonempty '+)
  (c-set-offset 'arglist-close '+)

#+END_SRC

** C#
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :straight t)
#+END_SRC

** C
"Linux" style for the braces, and basic offset of 4

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC

** C++
C/C++ language server
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t
    :config

    (use-package company-lsp
      :straight t
      :config
      (add-to-list 'company-backends 'company-lsp))

    (use-package flycheck
      :straight t)
    ;; (use-package flycheck
    ;;   :straight t
    ;;   :config
      ;; (use-package lsp-ui
      ;;   :straight t
      ;;   :config
      ;;   (add-hook 'lsp-mode-hook 'lsp-ui-mode)))

    (add-hook 'c++-mode-hook #'lsp)
    (add-hook 'c-mode-hook #'lsp)
  )

  (add-hook 'c++-mode-hook (lambda() (c-set-offset 'inlambda 0)))
#+END_SRC

** Shaderlab
#+BEGIN_SRC emacs-lisp
  (use-package shader-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.shader\\'" . shader-mode))
    (add-to-list 'auto-mode-alist '("\\.compute\\'" . shader-mode)))

#+END_SRC

** Emacs Lisp

Eval and print with M-ret and S-ret. Not sure if this is such a good
idea, but it's neat sometimes.
#+BEGIN_SRC emacs-lisp
  (defun evil-eval-and-print-sexp ()
    (interactive)
    (evil-append 1 0 nil)
    (eval-print-last-sexp)
    (evil-normal-state))

  (general-define-key
   :keymaps '(lisp-interaction-mode-map emacs-lisp-mode-map)
   :states '(normal insert)
   "<M-return>" 'evil-eval-and-print-sexp
   "<S-return>" 'eval-last-sexp)
#+END_SRC

** Lua
Add lua mode

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :straight t
    :config
    (add-hook 'lua-mode-hook (lambda () (setq indent-tabs-mode t))))
#+END_SRC

Lua prettyprinter. Requires that lua is installed, as well as the
inspect luarocks package

#+BEGIN_SRC emacs-lisp
  (defun gk/lua-pretty-print (&optional b e)
    (interactive)
    (if mark-active
        (gk/lua-pretty-print-region (region-beginning) (region-end))
      (save-excursion
        (set-mark (point-at-bol))
        (goto-char (point-at-eol))
        (gk/lua-pretty-print-region (region-beginning) (region-end)))))


    (defun gk/lua-pretty-print-region (&optional start end)
      (interactive "r")
      (let* ((lua-code
              (concat "inspect = require 'inspect'\n"
                      "local input = io.read('*a')\n"
                      "local table, err = load('x = {' .. input .. '}; return x[1]');\n"
                      "if err then\n"
                      "  io.write(input)\n"
                      "else\n"
                      "  io.write(inspect(table()))\n"
                      "end\n"))
             (command (concat "lua -e \"" lua-code "\"")))
        (shell-command-on-region start end command t t)
        (indent-region start end)))
#+END_SRC

** Scheme

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :straight t
    :config
    (add-hook 'scheme-mode-hook 'paredit-mode))

  (use-package evil-cleverparens
    :straight t
    :config
    (add-hook 'scheme-mode-hook 'evil-cleverparens-mode))
#+END_SRC

** Swift
#+BEGIN_SRC emacs-lisp
  (use-package swift-mode
    :straight t)
#+END_SRC

** Meson
#+BEGIN_SRC emacs-lisp
  (use-package meson-mode
    :straight t)
#+END_SRC

** Powershell
#+BEGIN_SRC emacs-lisp
  ;; (use-package powershell-mode
  ;;   :straight t)
#+END_SRC

** Raku
#+BEGIN_SRC emacs-lisp
  (use-package raku-mode
    :straight t)
#+END_SRC

** JSON 
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :straight t)
#+END_SRC
* Cotton stuff
** Show cotton logs
#+BEGIN_SRC emacs-lisp
  (defun gk/cotton-directory ()
    (if (string-equal system-type "darwin")
        "/Users/oskar.sigvardsson/Desktop/Cotton Juce 5 Logs/"
        "/mnt/c/Users/Oskar Sigvardsson/Desktop/Cotton Juce 5 Logs/"))

  (defun gk/latest-cotton-log-file ()
    (let* ((directory (gk/cotton-directory))
           (files (directory-files directory))
           (latest-file (seq-reduce (lambda (a b) (if (string< a b) b a)) files "")))
      (concat directory latest-file)))

  (defun gk/open-cotton-log-file ()
    (interactive)
    (find-file (gk/latest-cotton-log-file)))

  (defun gk/show-cotton-log ()
    (interactive)
    (find-file (gk/latest-cotton-log-file))
    (read-only-mode t)
    (end-of-buffer t)
    (auto-revert-tail-mode t))
#+END_SRC

** Exclude cotton logs from recentf
#+BEGIN_SRC emacs-lisp
  (add-to-list 'recentf-exclude ".*Cotton Juce 5 Logs.*")
#+END_SRC

** Remove clang from company
Really slow on cotton files, and it doesn't work anyway. I should find
a way to fix that...

#+BEGIN_SRC emacs-lisp
  ; (setq company-backends (delete 'company-clang company-backends))
#+END_SRC

* Start-up
** Split window into default buffers
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
	inhibit-startup-message t
	inhibit-startup-echo-area-message t)

  (defun default-window-setup ()
    (interactive)
    (if (display-graphic-p)
	(progn
	  (delete-other-windows)
	  (split-window-right)
	  (switch-to-buffer "*scratch*")
	  ;;(find-file org-default-notes-file)
	  (other-window 1 nil)
  ;;        (org-agenda-list)
	  (switch-to-buffer "*scratch*")
	  (other-window 1 nil))
      (progn
	(delete-other-windows)
	(switch-to-buffer "*scratch*"))))

  (default-window-setup)
#+END_SRC



